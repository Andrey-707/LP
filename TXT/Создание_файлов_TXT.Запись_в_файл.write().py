# Создание_файла_TXT.Запись_информации_в_файл
from rich import print


f = open("example_x.txt", 'w')
f.write("Какая-то информация.\n")
f.write("Новая информация.")
f.close()

# Создание файла и запись в него информации через input
f = open("example.txt", 'w')
f.write("Первая часть документа\n")
user_data = int(input("Введите число: "))
f.write("Пользователь ввел число {}".format(user_data))
f.close()

# в данном случае если пользователь введет строку, которую невозможно преобразовать в
# целое число, программа завершится с ошибкой. Следовательно, до вызова метода close дело
# не дойдет и файл не будет закрыт.

# Контекстный менеджер with ... as.
# Менеджер контекста используется для оборачивания части программы на Python для гарантии,
# что критические функции выполнятся в любом случае, даже при возникновении непредвиденной
# ошибки.
# С использованием контекстного менеджера файл будет закрыт в любом случае, даже если
# произойдет ошибка. Вызывать метод close вместе с with ... as не нужно, так как он будет
# вызван контекстным менеджером автоматически.
with open("example.txt", 'w') as f:
    f.write("Первая часть документа\n")
    user_data = int(input("Введите число: "))
    f.write("Пользователь ввел число {}".format(user_data))
